package PredictorToolkits;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Hoimin
 */
public class SIConvertor extends javax.swing.JFrame {

    /**
     * Creates new form SIConvertor
     */
    public SIConvertor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        textAreatoConvert = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        comboboxProgram = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtRootPath = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaInstruction = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCoordinatesPath = new javax.swing.JTextField();
        txtFrequenciesPath = new javax.swing.JTextField();
        btnConvert = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SI Exporter");
        setMinimumSize(new java.awt.Dimension(500, 500));

        textAreatoConvert.setColumns(20);
        textAreatoConvert.setRows(5);
        jScrollPane3.setViewportView(textAreatoConvert);

        jLabel3.setText("Program used:");

        comboboxProgram.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gaussian", "Jaguar", "QChem", "ORCA" }));

        jLabel1.setText("Root path:");

        jButton1.setText("Path");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textAreaInstruction.setColumns(20);
        textAreaInstruction.setLineWrap(true);
        textAreaInstruction.setRows(5);
        textAreaInstruction.setText("[SI Exporter Instruction]\nThis utility reads output files from Gaussian, Jaguar, ORCA and QChem to export XYZ coordinates and frequencies into text files.\nPlease indicate the program that you have used for the computation, write down the root file path that contains files or folders of your  data.\nWrite down your calculation ID and SI-label to the text area, and click convert.\n\n*Root path should be a common folder that contains your computational output files or folders.\n\nFormat)\n[output file name] [Label]\nHJ_HWK010V Rh-1a\nHJ_HWK011V Rh-2a");
        textAreaInstruction.setFocusable(false);
        jScrollPane4.setViewportView(textAreaInstruction);

        jLabel4.setText("Coordinates: ");

        jLabel5.setText("Frequencies:");

        txtCoordinatesPath.setText("C:\\Predictor\\SI-Exporter\\SI-Coordinates.txt");

        txtFrequenciesPath.setText("C:\\Predictor\\SI-Exporter\\SI-Frequencies.txt");

        btnConvert.setText("Convert");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxProgram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRootPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFrequenciesPath, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCoordinatesPath)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboboxProgram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtRootPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCoordinatesPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtFrequenciesPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnConvert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(412, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String rootpath = "";
        JFileChooser jfc = new JFileChooser("C\\");
        jfc.setMultiSelectionEnabled(true);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jfc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File[] file = jfc.getSelectedFiles();
            rootpath = file[0].getAbsolutePath();
        }
        txtRootPath.setText(rootpath);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        // TODO add your handling code here:
        String RootPath = txtRootPath.getText();
        if (RootPath.isBlank() || RootPath.isEmpty()){
            JOptionPane.showMessageDialog(null, "Please assign a root folder!");
        }else if (!new File(RootPath).isDirectory()) {
            JOptionPane.showMessageDialog(null, "Please assign a directory!");
        } else {
            String[] toConvert = textAreatoConvert.getText().split("\n");
            for (int i = 0; i < toConvert.length; i++) {
                String CalcID = toConvert[i].split("\\s+")[0];
                String SI_Name = toConvert[i].split("\\s+")[1];
                
                String CalcPath = "";
                if (new File (RootPath+"\\"+CalcID).isDirectory()){
                    CalcPath = RootPath+"\\"+CalcID;
                }else{
                    CalcPath = RootPath;
                }
                
                if (new File(txtCoordinatesPath.getText()).exists()){
                    
                }
                
                
                if (comboboxProgram.getSelectedObjects()[0].toString().equals("Jaguar")) {
                    SI_Jaguar(CalcPath, CalcID, SI_Name);
                } else if (comboboxProgram.getSelectedObjects()[0].toString().equals("QChem")) {
                    try {
                        SI_QChem(CalcPath, CalcID, SI_Name);
                    } catch (IOException ex) {
                        Logger.getLogger(SIConvertor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (comboboxProgram.getSelectedObjects()[0].toString().equals("Gaussian")) {
                    try {
                        SI_Gaussian(CalcPath, CalcID, SI_Name);
                    } catch (IOException ex) {
                        Logger.getLogger(SIConvertor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (comboboxProgram.getSelectedObjects()[0].toString().equals("ORCA")) {
                    try {
                        SI_ORCA(CalcPath, CalcID, SI_Name);
                    } catch (IOException ex) {
                        Logger.getLogger(SIConvertor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Done!");
            String[] coords = txtCoordinatesPath.getText().split("\\\\");
            String path = "";
            for (int i = 0; i < coords.length-1; i++){
                path = path + coords[i] + "\\";
            }
            File file = new File(path);
            JOptionPane.showMessageDialog(null, path);
            try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
            }
            
        }
    }//GEN-LAST:event_btnConvertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SIConvertor().setVisible(true);
            }
        });
    }
    private static Connection conn = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private static javax.swing.JComboBox<String> comboboxProgram;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea textAreaInstruction;
    private javax.swing.JTextArea textAreatoConvert;
    private static javax.swing.JTextField txtCoordinatesPath;
    private static javax.swing.JTextField txtFrequenciesPath;
    private javax.swing.JTextField txtRootPath;
    // End of variables declaration//GEN-END:variables

    private static void SI_Jaguar(String CalcPath, String CalcID, String SI_Name) {
        try {
            File coord = new File(txtCoordinatesPath.getText());
            File coord_xyz = new File(txtCoordinatesPath.getText().replace(".txt", ".xyz"));
            File freq_file = new File(txtFrequenciesPath.getText());
            File dir_coord = new File(coord.getParent());
            File dir_freq = new File(freq_file.getParent());
            if (!dir_coord.exists()) {
                dir_coord.mkdirs();
            }
            if (!dir_freq.exists()) {
                dir_freq.mkdirs();
            }
            String file01path = CalcPath + "\\" + CalcID + ".01.in";
            BufferedReader file_out = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".out"));
            BufferedReader file_01_in1 = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".01.in"));
            BufferedReader file_01_in = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".01.in"));
            BufferedWriter bf_FREQ = new BufferedWriter(new FileWriter(txtFrequenciesPath.getText(), true));
            PrintWriter file_FREQ = new PrintWriter(bf_FREQ, true);
            BufferedWriter bf_Coord = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText(), true));
            PrintWriter file_Coord = new PrintWriter(bf_Coord, true);
            BufferedWriter bf_Coord_xyz = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText().replace(".txt", ".xyz"), true));
            PrintWriter file_Coord_xyz = new PrintWriter(bf_Coord_xyz, true);

            file_FREQ.println("===============================");
            file_FREQ.println(SI_Name);
            file_FREQ.println("===============================");
            file_Coord.println("===============================");
            file_Coord.println(SI_Name);
            file_Coord.println("===============================");

            // Export the frequency data from .out file
            String Line = file_out.readLine();
            while (!(Line == null)) {
                if (Line.startsWith("  frequencies")) {
                    Line = Line.trim();
                    String format = String.format("%8s", Line.split("\\s+")[1]);
                    for (int i = 2; i < Line.split("\\s+").length; i++) {
                        format = format + String.format("%8s", Line.split("\\s+")[i]);
                    }
                    file_FREQ.println(format);
                }
                Line = file_out.readLine();
            }
            file_FREQ.close();
            file_out.close();

            // Export the last geometry data from .01.in file
            File filechk = new File(file01path);
            if (filechk.exists()) {
                String line = file_01_in.readLine();
                while (true) {
                    if (line.equals("&zmat")) {
                        line = file_01_in.readLine();
                        break;
                    }
                    line = file_01_in.readLine();
                }
                while (!(line.equals("&"))) {
                    line = line.trim();
                    String format = String.format("%4s ", line.split("\\s+")[0].replaceAll("[0-9]", ""));//처음 4칸
                    for (int i = 1; i < line.split("\\s+").length; i++) {
                        format = format + String.format("%14.9f", Double.parseDouble(line.split("\\s+")[i])); //14칸
                    }
                    file_Coord.println(format);
                    line = file_01_in.readLine();
                }
            }
            file_01_in.close();
            file_Coord.close();

            // Generates the SI file in .xyz format
            //File filechk = new File(file01path);
            String format = "";
            int numatoms = 0;
            if (filechk.exists()) {
                String line = file_01_in1.readLine();
                while (true) {
                    if (line.equals("&zmat")) {
                        line = file_01_in1.readLine();
                        break;
                    }
                    line = file_01_in1.readLine();
                }
                while (!(line.equals("&"))) {
                    line = line.trim();
                    numatoms += 1;
                    format += String.format("%3s ", line.split("\\s+")[0].replaceAll("[0-9]", ""));//처음 4칸
                    for (int i = 1; i < line.split("\\s+").length; i++) {
                        format = format + String.format("%14.9f", Double.parseDouble(line.split("\\s+")[i])); //14칸
                    }
                    format = format + "\n";
                    // file_Coord.println(format);
                    line = file_01_in1.readLine();
                }
            }
            file_Coord_xyz.println(numatoms);
            file_Coord_xyz.println(SI_Name);
            file_Coord_xyz.println(format);
            file_01_in1.close();
            file_Coord_xyz.close();

        } catch (IOException ex) {
            Logger.getLogger(SIConvertor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //JOptionPane.showMessageDialog(null, "Done!");

    }

    private static void SI_QChem(String CalcPath, String CalcID, String SI_Name) throws IOException {
        File coord = new File(txtCoordinatesPath.getText());
        File coord_xyz = new File(txtCoordinatesPath.getText().replace(".txt", ".xyz"));
        File freq_file = new File(txtFrequenciesPath.getText());
        File dir_coord = new File(coord.getParent());
        File dir_freq = new File(freq_file.getParent());
        if (!dir_coord.exists()) {
            dir_coord.mkdirs();
        }
        if (!dir_freq.exists()) {
            dir_freq.mkdirs();
        }

        BufferedWriter bf_FREQ = new BufferedWriter(new FileWriter(txtFrequenciesPath.getText(), true));
        PrintWriter file_FREQ = new PrintWriter(bf_FREQ, true);
        BufferedWriter bf_Coord = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText(), true));
        PrintWriter file_Coord = new PrintWriter(bf_Coord, true);
        BufferedWriter bf_Coord_xyz = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText().replace(".txt", ".xyz"), true));
        PrintWriter file_Coord_xyz = new PrintWriter(bf_Coord_xyz, true);

        BufferedReader Out = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".out"));
        String line = Out.readLine();
        ArrayList<String> geometry = new ArrayList<String>();
        ArrayList<String> xyzformline = new ArrayList<String>();
        ArrayList<String> freqs = new ArrayList<String>();

        // Extracting data...
        while (line != null) {
            if (line.contains("Standard Nuclear Orientation (Angstroms)")) {
                geometry.clear();
                freqs.clear();
                line = Out.readLine();
                line = Out.readLine();
                line = Out.readLine();
                while (!line.contains("----------------------------------------------------------------")) {
                    geometry.add(line);
                    line = Out.readLine();
                }
            } else if (line.startsWith(" Frequency:")) {
                for (int i = 1; i < line.split("\\s+").length - 1; i++) {
                    freqs.add(line.trim().split("\\s+")[i]);
                }
            }
            line = Out.readLine();
        }

        // Actual Writing...
        // 1. Freq
        file_FREQ.println("===============================");
        file_FREQ.println(SI_Name);
        file_FREQ.println("===============================");
        String temp = "";
        for (String freq : freqs) {
            if (temp.length() < 50) {
                temp = temp + " " + freq;
            } else {
                file_FREQ.println(temp);
                temp = freq;
            }
        }
        if (temp.length() > 0) {
            file_FREQ.println(temp);
        }
        file_FREQ.close();

        // 2. xyz text & xyz .xyz
        file_Coord.println("===============================");
        file_Coord.println(SI_Name);
        file_Coord.println("===============================");

        file_Coord_xyz.println(geometry.size());
        file_Coord_xyz.println(SI_Name);

        for (int j = 0; j < geometry.size(); j++) {
            for (int k = 0; k < 5; k++) {
                xyzformline.add(geometry.get(j).trim().split("\\s+")[k]);
            }
            file_Coord.println(String.format("%3s %14.9f%14.9f%14.9f ", xyzformline.get(1), Double.parseDouble(xyzformline.get(2)), Double.parseDouble(xyzformline.get(3)), Double.parseDouble(xyzformline.get(4))));
            file_Coord_xyz.println(String.format("%3s %14.9f%14.9f%14.9f", xyzformline.get(1), Double.parseDouble(xyzformline.get(2)), Double.parseDouble(xyzformline.get(3)), Double.parseDouble(xyzformline.get(4))));
            xyzformline.clear();
        }

        file_Coord_xyz.println("");
        file_Coord.close();
        file_Coord_xyz.close();

    }

    private static void SI_ORCA(String CalcPath, String CalcID, String SI_Name) throws IOException {
        File coord = new File(txtCoordinatesPath.getText());
        File coord_xyz = new File(txtCoordinatesPath.getText().replace(".txt", ".xyz"));
        File freq_file = new File(txtFrequenciesPath.getText());
        File dir_coord = new File(coord.getParent());
        File dir_freq = new File(freq_file.getParent());
        if (!dir_coord.exists()) {
            dir_coord.mkdirs();
        }
        if (!dir_freq.exists()) {
            dir_freq.mkdirs();
        }
        BufferedWriter bf_FREQ = new BufferedWriter(new FileWriter(txtFrequenciesPath.getText(), true));
        PrintWriter file_FREQ = new PrintWriter(bf_FREQ, true);
        BufferedWriter bf_Coord = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText(), true));
        PrintWriter file_Coord = new PrintWriter(bf_Coord, true);
        BufferedWriter bf_Coord_xyz = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText().replace(".txt", ".xyz"), true));
        PrintWriter file_Coord_xyz = new PrintWriter(bf_Coord_xyz, true);

        BufferedReader Out = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".out"));
        String line = Out.readLine();
        ArrayList<String> geometry = new ArrayList<String>();
        ArrayList<String> xyzfromline = new ArrayList<String>();
        ArrayList<String> freqs = new ArrayList<String>();

        // Extracting data...
        while (line != null) {
            if (line.contains("CARTESIAN COORDINATES (ANGSTROEM)")) {
                geometry.clear();
                line = Out.readLine();
                line = Out.readLine();
                while (!line.contains("------")) {
                    geometry.add(line);
                    line = Out.readLine();
                }
            } else if (line.contains(" cm**") && Double.parseDouble(line.split("\\s+")[2]) != 0.00) {
                String formatted = String.format("%.2f", Double.parseDouble(line.split("\\s+")[2]));
                freqs.add(formatted);
            }

            line = Out.readLine();
        }

        // Actual Writing...
        // 1. Freq
        file_FREQ.println("===============================");
        file_FREQ.println(SI_Name);
        file_FREQ.println("===============================");
        String temp = "";
        for (String freq : freqs) {
            if (temp.length() < 48) {
                temp = temp + " " + freq;
            } else {
                file_FREQ.println(temp);
                temp = freq;
            }
        }
        if (temp.length() > 0) {
            file_FREQ.println(temp);
        }
        file_FREQ.close();

        // 2. xyz text & xyz .xyz
        file_Coord.println("===============================");
        file_Coord.println(SI_Name);
        file_Coord.println("===============================");

        file_Coord_xyz.println(geometry.size());
        file_Coord_xyz.println(SI_Name);

        for (int j = 0; j < geometry.size() - 1; j++) {
            for (int k = 0; k < 4; k++) {
                xyzfromline.add(geometry.get(j).trim().split("\\s+")[k]);
            }
            file_Coord.println(String.format("%3s %14.9f%14.9f%14.9f ", xyzfromline.get(0), Double.parseDouble(xyzfromline.get(1)), Double.parseDouble(xyzfromline.get(2)), Double.parseDouble(xyzfromline.get(3))));
            file_Coord_xyz.println(String.format("%3s %14.9f%14.9f%14.9f", xyzfromline.get(0), Double.parseDouble(xyzfromline.get(1)), Double.parseDouble(xyzfromline.get(2)), Double.parseDouble(xyzfromline.get(3))));
            xyzfromline.clear();
        }

        file_Coord_xyz.println("");
        file_Coord.close();
        file_Coord_xyz.close();
    }

    private static void SI_Gaussian(String CalcPath, String CalcID, String SI_Name) throws IOException {
        File coord = new File(txtCoordinatesPath.getText());
        File coord_xyz = new File(txtCoordinatesPath.getText().replace(".txt", ".xyz"));
        File freq_file = new File(txtFrequenciesPath.getText());
        File dir_coord = new File(coord.getParent());
        File dir_freq = new File(freq_file.getParent());
        if (!dir_coord.exists()) {
            dir_coord.mkdirs();
        }
        if (!dir_freq.exists()) {
            dir_freq.mkdirs();
        }
        BufferedWriter bf_FREQ = new BufferedWriter(new FileWriter(txtFrequenciesPath.getText(), true));
        PrintWriter file_FREQ = new PrintWriter(bf_FREQ, true);
        BufferedWriter bf_Coord = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText(), true));
        PrintWriter file_Coord = new PrintWriter(bf_Coord, true);
        BufferedWriter bf_Coord_xyz = new BufferedWriter(new FileWriter(txtCoordinatesPath.getText().replace(".txt", ".xyz"), true));
        PrintWriter file_Coord_xyz = new PrintWriter(bf_Coord_xyz, true);

        BufferedReader Out = new BufferedReader(new FileReader(CalcPath + "\\" + CalcID + ".out"));
        String line = Out.readLine();
        ArrayList<String> geometry = new ArrayList<String>();
        ArrayList<String> xyzfromline = new ArrayList<String>();
        ArrayList<String> freqs = new ArrayList<String>();

        // Extracting data...
        while (line != null) {
            if (line.contains("Input orientation:")) {
                geometry.clear();
                line = Out.readLine();
                line = Out.readLine();
                line = Out.readLine();
                line = Out.readLine();
                line = Out.readLine();
                while (!line.contains("------")) {
                    geometry.add(line);
                    line = Out.readLine();
                }
            } else if (line.contains("Frequencies --")) {
                for (int i = 3; i < line.split("\\s+").length; i++) {
                    String formatted = String.format("%.2f", Double.parseDouble(line.split("\\s+")[i]));
                    freqs.add(formatted);
                }
            }

            line = Out.readLine();
        }

        // Actual Writing...
        // 1. Freq
        file_FREQ.println("===============================");
        file_FREQ.println(SI_Name);
        file_FREQ.println("===============================");
        String temp = "";
        for (String freq : freqs) {
            if (temp.length() < 48) {
                temp = temp + " " + freq;
            } else {
                file_FREQ.println(temp);
                temp = freq;
            }
        }
        if (temp.length() > 0) {
            file_FREQ.println(temp);
        }
        file_FREQ.close();

        // 2. xyz text & xyz .xyz
        file_Coord.println("===============================");
        file_Coord.println(SI_Name);
        file_Coord.println("===============================");

        file_Coord_xyz.println(geometry.size());
        file_Coord_xyz.println(SI_Name);

        for (int j = 0; j < geometry.size(); j++) {
            for (int k = 0; k < 6; k++) {
                xyzfromline.add(geometry.get(j).trim().split("\\s+")[k]);
            }
            file_Coord.println(String.format("%3s %14.6f%14.6f%14.6f ", classify_atoms(Integer.parseInt(xyzfromline.get(1))), Double.parseDouble(xyzfromline.get(3)), Double.parseDouble(xyzfromline.get(4)), Double.parseDouble(xyzfromline.get(5))));
            file_Coord_xyz.println(String.format("%3s %14.6f%14.6f%14.6f", classify_atoms(Integer.parseInt(xyzfromline.get(1))), Double.parseDouble(xyzfromline.get(3)), Double.parseDouble(xyzfromline.get(4)), Double.parseDouble(xyzfromline.get(5))));
            xyzfromline.clear();
        }

        file_Coord_xyz.println("");
        file_Coord.close();
        file_Coord_xyz.close();
    }
    public static String classify_atoms(Integer atom) throws IOException {
        HashMap<Integer, String> periodictable = new HashMap<Integer, String>();

        periodictable.put(1, "H");
        periodictable.put(2, "He");
        periodictable.put(3, "Li");
        periodictable.put(4, "Be");
        periodictable.put(5, "B");
        periodictable.put(6, "C");
        periodictable.put(7, "N");
        periodictable.put(8, "O");
        periodictable.put(9, "F");
        periodictable.put(10, "Ne");
        periodictable.put(11, "Na");
        periodictable.put(12, "Mg");
        periodictable.put(13, "Al");
        periodictable.put(14, "Si");
        periodictable.put(15, "P");
        periodictable.put(16, "S");
        periodictable.put(17, "Cl");
        periodictable.put(18, "Ar");
        periodictable.put(19, "K");
        periodictable.put(20, "Ca");
        periodictable.put(21, "Sc");
        periodictable.put(22, "Ti");
        periodictable.put(23, "V");
        periodictable.put(24, "Cr");
        periodictable.put(25, "Mn");
        periodictable.put(26, "Fe");
        periodictable.put(27, "Co");
        periodictable.put(28, "Ni");
        periodictable.put(29, "Cu");
        periodictable.put(30, "Zn");
        periodictable.put(31, "Ga");
        periodictable.put(32, "Ge");
        periodictable.put(33, "As");
        periodictable.put(34, "Se");
        periodictable.put(35, "Br");
        periodictable.put(36, "Kr");
        periodictable.put(37, "Rb");
        periodictable.put(38, "Sr");
        periodictable.put(39, "Y");
        periodictable.put(40, "Zr");
        periodictable.put(41, "Nb");
        periodictable.put(42, "Mo");
        periodictable.put(43, "Tc");
        periodictable.put(44, "Ru");
        periodictable.put(45, "Rh");
        periodictable.put(46, "Pd");
        periodictable.put(47, "Ag");
        periodictable.put(48, "Cd");
        periodictable.put(49, "In");
        periodictable.put(50, "Sn");
        periodictable.put(51, "Sb");
        periodictable.put(52, "Te");
        periodictable.put(53, "I");
        periodictable.put(54, "Xe");
        periodictable.put(55, "Cs");
        periodictable.put(56, "Ba");
        periodictable.put(57, "La");
        periodictable.put(58, "Ce");
        periodictable.put(59, "Pr");
        periodictable.put(60, "Nd");
        periodictable.put(61, "Pm");
        periodictable.put(62, "Sm");
        periodictable.put(63, "Eu");
        periodictable.put(64, "Gd");
        periodictable.put(65, "Tb");
        periodictable.put(66, "Dy");
        periodictable.put(67, "Ho");
        periodictable.put(68, "Er");
        periodictable.put(69, "Tm");
        periodictable.put(70, "Yb");
        periodictable.put(71, "Lu");
        periodictable.put(72, "Hf");
        periodictable.put(73, "Ta");
        periodictable.put(74, "W");
        periodictable.put(75, "Re");
        periodictable.put(76, "Os");
        periodictable.put(77, "Ir");
        periodictable.put(78, "Pt");
        periodictable.put(79, "Au");
        periodictable.put(80, "Hg");
        periodictable.put(81, "Tl");
        periodictable.put(82, "Pb");
        periodictable.put(83, "Bi");
        periodictable.put(84, "Po");
        periodictable.put(85, "At");
        periodictable.put(86, "Rn");
        periodictable.put(87, "Fr");
        periodictable.put(88, "Ra");
        periodictable.put(89, "Ac");
        periodictable.put(90, "Th");
        periodictable.put(91, "Pa");
        periodictable.put(92, "U");
        periodictable.put(93, "Np");
        periodictable.put(94, "Pu");
        periodictable.put(95, "Am");
        periodictable.put(96, "Cm");
        periodictable.put(97, "Bk");
        periodictable.put(98, "Cf");
        periodictable.put(99, "Es");
        periodictable.put(100, "Fm");
        periodictable.put(101, "Md");
        periodictable.put(102, "No");
        periodictable.put(103, "Lr");
        periodictable.put(104, "Rf");
        periodictable.put(105, "Db");
        periodictable.put(106, "Sg");
        periodictable.put(107, "Bh");
        periodictable.put(108, "Hs");
        periodictable.put(109, "Mt");
        periodictable.put(110, "Ds");
        periodictable.put(111, "Rg");
        periodictable.put(112, "Cn");
        periodictable.put(113, "Uut");
        periodictable.put(114, "Fl");
        periodictable.put(115, "Uup");
        periodictable.put(116, "Lv");
        periodictable.put(117, "Uus");
        periodictable.put(118, "Uuo");

        return periodictable.get(atom);
    }
}
